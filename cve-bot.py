import xmltodict, requests, sqlite3, os.path, time
from mastodon import Mastodon

DB_PATH = "./postedCVEs.sqlite3"
SERVER_URL = "https : //your.server.here"
TOKEN = "YOURTOKENHERE"
DELAY = 60

def createDB(path = os.path.join(os.path.dirname(__file__), DB_PATH)):
    db = connectDB()
    cur = db.cursor()
    sql1 = """
    CREATE TABLE cves (
        id integer PRIMARY KEY,
        cve text NOT NULL)"""
    try:
        cur.execute(sql1)
        db.commit()
    finally:
        cur.close()
    db.close()

def connectDB(path = os.path.join(os.path.dirname(__file__), DB_PATH)):
    db = sqlite3.connect(path)
    return db

def dbCheck():
    if not os.path.isfile(DB_PATH):
        createDB()
        print('DB created')

def addCVE(db, cve):
    cur = db.cursor()
    sql = "INSERT INTO cves (cve) VALUES (?)"
    try:
        cur.execute(sql, (cve,))
        db.commit()
    finally:
        cur.close()

def checkCVE(db, cve):
    index = None
    cur = db.cursor()
    sql = "SELECT cve FROM cves WHERE cve=?"
    try:
        cur.execute(sql, (cve,))
        index = cur.fetchall()
    finally:
            cur.close()
    try:
        return index[0][0]
    except:
        return ""

def postCVE(m, cve_title, cve_date, cve_link, cve_desc):
    post_body = "#CVE\n[%s](%s)\n%s\n\"%s\"" % (cve_title, cve_link, cve_date, cve_desc)
    a = m.status_post(status=post_body)

def getLatestCVEs():
        r = requests.get(url="https://nvd.nist.gov/download/nvd-rss.xml")
        return xmltodict.parse(r.text)

def iterate(cve_dict):
        dbCheck()
        db = connectDB()
        m = Mastodon(access_token=TOKEN, api_base_url=SERVER_URL)
        for b in cve_dict['rdf:RDF']['item']:
                if (not checkCVE(db, b['title'].split()[0])):
                        try:
                                postCVE(m, b['title'].split()[0], b['dc:date'], b['link'], b['description'])
                                addCVE(db, b['title'].split()[0])
                        except:
                                print("Failed to add CVE [%s], will re-attempt on next iteration" % (b['title'].split()[0]))
                print("sleeping for %ss" % (DELAY))
                time.sleep(DELAY)

def main():
        iterate(getLatestCVEs())

if __name__ == "__main__":
    main()
